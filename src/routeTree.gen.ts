/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createServerRootRoute } from '@tanstack/react-start/server'

import { Route as rootRouteImport } from './routes/__root'
import { Route as SearchRouteImport } from './routes/search'
import { Route as OrdersRouteImport } from './routes/orders'
import { Route as CartRouteImport } from './routes/cart'
import { Route as AdminRouteImport } from './routes/admin'
import { Route as IndexRouteImport } from './routes/index'
import { Route as ShopCategoryRouteImport } from './routes/shop.$category'
import { Route as ProductsIdRouteImport } from './routes/products.$id'
import { ServerRoute as ApiAuthVerifyPaymentServerRouteImport } from './routes/api/auth/verify-payment'
import { ServerRoute as ApiAuthSplatServerRouteImport } from './routes/api/auth/$'

const rootServerRouteImport = createServerRootRoute()

const SearchRoute = SearchRouteImport.update({
  id: '/search',
  path: '/search',
  getParentRoute: () => rootRouteImport,
} as any)
const OrdersRoute = OrdersRouteImport.update({
  id: '/orders',
  path: '/orders',
  getParentRoute: () => rootRouteImport,
} as any)
const CartRoute = CartRouteImport.update({
  id: '/cart',
  path: '/cart',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminRoute = AdminRouteImport.update({
  id: '/admin',
  path: '/admin',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const ShopCategoryRoute = ShopCategoryRouteImport.update({
  id: '/shop/$category',
  path: '/shop/$category',
  getParentRoute: () => rootRouteImport,
} as any)
const ProductsIdRoute = ProductsIdRouteImport.update({
  id: '/products/$id',
  path: '/products/$id',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiAuthVerifyPaymentServerRoute =
  ApiAuthVerifyPaymentServerRouteImport.update({
    id: '/api/auth/verify-payment',
    path: '/api/auth/verify-payment',
    getParentRoute: () => rootServerRouteImport,
  } as any)
const ApiAuthSplatServerRoute = ApiAuthSplatServerRouteImport.update({
  id: '/api/auth/$',
  path: '/api/auth/$',
  getParentRoute: () => rootServerRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/admin': typeof AdminRoute
  '/cart': typeof CartRoute
  '/orders': typeof OrdersRoute
  '/search': typeof SearchRoute
  '/products/$id': typeof ProductsIdRoute
  '/shop/$category': typeof ShopCategoryRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/admin': typeof AdminRoute
  '/cart': typeof CartRoute
  '/orders': typeof OrdersRoute
  '/search': typeof SearchRoute
  '/products/$id': typeof ProductsIdRoute
  '/shop/$category': typeof ShopCategoryRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/admin': typeof AdminRoute
  '/cart': typeof CartRoute
  '/orders': typeof OrdersRoute
  '/search': typeof SearchRoute
  '/products/$id': typeof ProductsIdRoute
  '/shop/$category': typeof ShopCategoryRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/admin'
    | '/cart'
    | '/orders'
    | '/search'
    | '/products/$id'
    | '/shop/$category'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/admin'
    | '/cart'
    | '/orders'
    | '/search'
    | '/products/$id'
    | '/shop/$category'
  id:
    | '__root__'
    | '/'
    | '/admin'
    | '/cart'
    | '/orders'
    | '/search'
    | '/products/$id'
    | '/shop/$category'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AdminRoute: typeof AdminRoute
  CartRoute: typeof CartRoute
  OrdersRoute: typeof OrdersRoute
  SearchRoute: typeof SearchRoute
  ProductsIdRoute: typeof ProductsIdRoute
  ShopCategoryRoute: typeof ShopCategoryRoute
}
export interface FileServerRoutesByFullPath {
  '/api/auth/$': typeof ApiAuthSplatServerRoute
  '/api/auth/verify-payment': typeof ApiAuthVerifyPaymentServerRoute
}
export interface FileServerRoutesByTo {
  '/api/auth/$': typeof ApiAuthSplatServerRoute
  '/api/auth/verify-payment': typeof ApiAuthVerifyPaymentServerRoute
}
export interface FileServerRoutesById {
  __root__: typeof rootServerRouteImport
  '/api/auth/$': typeof ApiAuthSplatServerRoute
  '/api/auth/verify-payment': typeof ApiAuthVerifyPaymentServerRoute
}
export interface FileServerRouteTypes {
  fileServerRoutesByFullPath: FileServerRoutesByFullPath
  fullPaths: '/api/auth/$' | '/api/auth/verify-payment'
  fileServerRoutesByTo: FileServerRoutesByTo
  to: '/api/auth/$' | '/api/auth/verify-payment'
  id: '__root__' | '/api/auth/$' | '/api/auth/verify-payment'
  fileServerRoutesById: FileServerRoutesById
}
export interface RootServerRouteChildren {
  ApiAuthSplatServerRoute: typeof ApiAuthSplatServerRoute
  ApiAuthVerifyPaymentServerRoute: typeof ApiAuthVerifyPaymentServerRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/search': {
      id: '/search'
      path: '/search'
      fullPath: '/search'
      preLoaderRoute: typeof SearchRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/orders': {
      id: '/orders'
      path: '/orders'
      fullPath: '/orders'
      preLoaderRoute: typeof OrdersRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/cart': {
      id: '/cart'
      path: '/cart'
      fullPath: '/cart'
      preLoaderRoute: typeof CartRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin': {
      id: '/admin'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/shop/$category': {
      id: '/shop/$category'
      path: '/shop/$category'
      fullPath: '/shop/$category'
      preLoaderRoute: typeof ShopCategoryRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/products/$id': {
      id: '/products/$id'
      path: '/products/$id'
      fullPath: '/products/$id'
      preLoaderRoute: typeof ProductsIdRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}
declare module '@tanstack/react-start/server' {
  interface ServerFileRoutesByPath {
    '/api/auth/verify-payment': {
      id: '/api/auth/verify-payment'
      path: '/api/auth/verify-payment'
      fullPath: '/api/auth/verify-payment'
      preLoaderRoute: typeof ApiAuthVerifyPaymentServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/auth/$': {
      id: '/api/auth/$'
      path: '/api/auth/$'
      fullPath: '/api/auth/$'
      preLoaderRoute: typeof ApiAuthSplatServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AdminRoute: AdminRoute,
  CartRoute: CartRoute,
  OrdersRoute: OrdersRoute,
  SearchRoute: SearchRoute,
  ProductsIdRoute: ProductsIdRoute,
  ShopCategoryRoute: ShopCategoryRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
const rootServerRouteChildren: RootServerRouteChildren = {
  ApiAuthSplatServerRoute: ApiAuthSplatServerRoute,
  ApiAuthVerifyPaymentServerRoute: ApiAuthVerifyPaymentServerRoute,
}
export const serverRouteTree = rootServerRouteImport
  ._addFileChildren(rootServerRouteChildren)
  ._addFileTypes<FileServerRouteTypes>()
